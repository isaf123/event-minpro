generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
  @@ignore
}

model Users {
  id            Int             @id @default(autoincrement())
  avatar_users  String?
  name          String
  email         String          @unique
  password      String
  referral_code String?         @unique
  role          Role
  tryLogin      Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  otp           String?
  token         String?         @unique
  isActive      Boolean         @default(true)
  address       String?
  phone         String?
  MasterEvent   MasterEvent[]
  Poin          Poin[]
  reviews_event reviews_event[]
  transactions  Transaction[]
  vouchers      Voucher[]

  @@map("users")
}

model Poin {
  id            Int       @id @default(autoincrement())
  referral_code String?   @unique
  createdAt     DateTime  @default(now())
  expiredAt     DateTime?
  amount        Int       @default(10000)
  usersId       Int
  Users         Users     @relation(fields: [usersId], references: [id])

  @@index([usersId], map: "referral_usersId_fkey")
  @@map("poin")
}

model MasterEvent {
  id             Int             @id @default(autoincrement())
  flyer_event    String?
  title          String
  start_date     DateTime
  end_date       DateTime
  description    String?         @db.Text
  available_seat Int
  event_type     EventType
  price          Int
  location       String
  usersId        Int
  address        String
  max_ticket     Int
  category       Category
  user_id        Users           @relation(fields: [usersId], references: [id])
  reviews_event  reviews_event[]
  transactions   Transaction[]
  Vouchers       Voucher[]

  @@index([usersId], map: "master_event_usersId_fkey")
  @@map("master_event")
}

model Transaction {
  id                   Int               @id @default(autoincrement())
  date_transaction     DateTime
  invoice_code         String
  user_id              Int
  event_id             Int
  total_price          Int
  status_transaction   TransactionStatus
  voucherId            Int?
  img_payment          String?
  price_after_discount Int
  ticket_count         Int
  point_discount       Int?
  voucher_discount     Int?
  event                MasterEvent       @relation(fields: [event_id], references: [id])
  user                 Users             @relation(fields: [user_id], references: [id])
  Voucher              Voucher?          @relation(fields: [voucherId], references: [id])

  @@index([event_id], map: "transaction_event_id_fkey")
  @@index([user_id], map: "transaction_user_id_fkey")
  @@index([voucherId], map: "transaction_voucherId_fkey")
  @@map("transaction")
}

model Voucher {
  id           Int           @id @default(autoincrement())
  name_voucher String
  discount     Float         @default(0.1)
  start_date   DateTime
  end_date     DateTime
  event_id     Int?
  user_id      Int?
  Transaction  Transaction[]
  event        MasterEvent?  @relation(fields: [event_id], references: [id])
  user         Users?        @relation(fields: [user_id], references: [id])

  @@index([event_id], map: "voucher_event_id_fkey")
  @@index([user_id], map: "voucher_user_id_fkey")
  @@map("voucher")
}

model reviews_event {
  id           Int         @id @default(autoincrement())
  review       String
  rating       Float
  event_id     Int
  user_id      Int
  master_event MasterEvent @relation(fields: [event_id], references: [id], map: "Reviews_Event_event_id_fkey")
  users        Users       @relation(fields: [user_id], references: [id], map: "Reviews_Event_user_id_fkey")

  @@index([event_id], map: "Reviews_Event_event_id_fkey")
  @@index([user_id], map: "Reviews_Event_user_id_fkey")
}

enum Category {
  Music
  Nightlife
  Holidays
  Hobby
  Culinary
  Other
}

enum Role {
  eo
  customers
}

enum EventType {
  free
  paid
}

enum TransactionStatus {
  submitted
  pending
  paid
}
